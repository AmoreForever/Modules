# üîí The GPL-3.0 license
# üåê https://www.gnu.org/licenses/agpl-3.0.html
#
# ---------------------------------------------------------------------------------
#‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚°†‚£ø‚¢∑‚£ª‚£ø‚£æ‚£≥‚°á‚¢∫‚†ü‚†í‚†í‚†∂‚¢§‚£à‚†É‚¢†‚°Ä
#‚†Ñ‚†Ñ‚†Ñ‚¢Ä‚£º‚°ø‚†ã‚¢â‚£â‚£ô‚†ø‚†Å‚¢Å‚£§‚£§‚£Ñ‚°Ä‚†Ñ‚†à‚†≥‚¢æ‚£ø‚£Ñ
#‚†Ñ‚†Ñ‚†Ñ‚¢û‚°û‚†Ñ‚£¥‚£ø‚°ø‚†õ‚†ì‚†Ñ‚†â‚†â‚†â‚†â‚†π‚£∑‚£Ñ‚†Ñ‚†Ñ‚†ô‚¢ø‚£¶
#‚†Ñ‚¢Ä‚£æ‚°ü‚†Ñ‚£∏‚†ü‚†Å‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ô‚¢ø‚°Ä‚†Ñ‚†∞‚£ø‚£Ü
#‚†Ñ‚¢∏‚£ø‚†Å‚¢∏‚£ø‚†Ñ‚†Ñ‚¢∏‚¢∏‚†Ñ‚†Ñ‚†Ñ‚¢∏‚£Ü‚¢†‚£Ä‚°Ä‚£ß‚£®‚£ª‚°Ä‚†Ñ‚¢ª‚£ø‚£¶‚£Ä
#‚†Ñ‚¢∏‚°á‚°Ä‚†ò‚£ø‚¢∞‚£ê‚¢æ‚¢ø‚°Ä‚†Ñ‚°Ä‚¢®‚£é‚£ª‚£∑‚£∂‚£ø‚£ø‚£ø‚£á‚¢Ä‚¢∏‚£ø‚£ø‚£ø‚£∑
#‚†Ñ‚¢∏‚££‚°á‚£ß‚£ø‚£ø‚£ø‚£ø‚°é‚¢≥‚£ü‚†ø‚£ø‚£ø‚£è‚£â‚£ø‚£ø‚£ø‚¢ª‚£ø‚£ø‚£æ‚£ø‚£ø‚£ø‚£ø‚£¶
#‚†Ñ‚†Ñ‚¢º‚°á‚¢π‚£ø‚°è‚¢†‚£ø‚£ø‚†Ñ‚†â‚†Ñ‚†Ñ‚†à‚†Ñ‚¢π‚£ø‚†ü‚†º‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
#‚†Ñ‚†Ñ‚†à‚¢ø‚¢à‚£ø‚°õ‚†ò‚£ø‚°á‚†Ñ‚†Ñ‚°Ä‚†Ñ‚†Ñ‚†Ñ‚†à‚†â‚†Å‚†Ñ‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
#‚†Ñ‚†Ñ‚¢Ä‚£ø‚£º‚°ø‚£ø‚£Ä‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†É‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†ò‚£ª‚°è‚£ø‚£ø‚¢ª‚£ø‚£ø‚£ø‚£ø
#‚†Ñ‚†Ñ‚†æ‚¢ª‚°á‚£ø‚£∏‚£¶‚£Ä‚†Ñ‚†Ñ‚†ê‚¢ü‚†ô‚¢ª‚†É‚†Ñ‚†Ñ‚†Ñ‚£æ‚°è‚£∑‚¢ª‚°π‚°ü‚£ø‚£ø‚°ü‚¢ø
#‚†Ñ‚¢Ä‚°¥‚¢ª‚£á‚¢ø‚£∑‚¢ª‚°ü‚†ª‚£∂‚£§‚£Ä‚†â‚†Ñ‚£Ä‚£¥‚°ø‚¢£‚°ü‚†Ñ‚£ø‚¢∏‚°á‚£∞‚°ü‚†ª‚†É‚¢∏
#‚¢†‚°è‚†Ñ‚†Ñ‚†à‚†ª‚£ø‚£è‚£∑‚†Ñ‚†à‚†ª‚†â‚†õ‚†õ‚†â‚†Ñ‚†Ñ‚¢õ‚†Ñ‚†Ñ‚†ª‚¢†‚†Å‚¢õ‚†Å‚†Ñ‚†Ñ‚¢∏
#‚£º‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚¢ø‚°ò‚†É‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚††‚†à‚†Ñ‚†Ñ‚†Ñ‚¢†‚£∏‚£†‚°û‚†Ñ‚†Ñ‚†Ñ‚£ø
#‚£§‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚¢∏‚£á‚°á‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†Ñ‚†à‚£ø‚†ü‚†Ñ‚†Ñ‚†Ñ‚£∏‚£ø
#
# üëæ Module for Telethon User Bot (Netfoll, Hikka, FTG)
# üîí The GPL-3.0 license
# ‚ö†Ô∏è Owner @morri_py, @morri_bio
# ---------------------------------------------------------------------------------
# meta developer: @morri_py
import requests

from .. import loader, utils

__version__ = (1, 0, 0)

@loader.tds
class CryptoStonksMod(loader.Module):
    """Show Stonks"""

    strings = {
        "name": "CryptoStonks",
        "who": "<emoji document_id=5280842756367851322>üìà</emoji> Cryptocurrency exchange rate",
    }

    strings_ru = {
        "who": "<emoji document_id=5280842756367851322>üìà</emoji> –ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã",
    }

    strings_uk = {
        "who": "<emoji document_id=5280842756367851322>üìà</emoji> –ö—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏",
    }

    async def stonks(self, symbols):
        url = "https://min-api.cryptocompare.com/data/pricemulti"
        parameters = {
            "fsyms": symbols,
            "tsyms": "USD,EUR,RUB,UAH",
            "api_key": "5d4d8c117119d62fae3290bb0587a20af7e2768c237df3690ce8bab4111b7330"
        }
        try:
            response = requests.get(url, params=parameters)
            response.raise_for_status()
            data = response.json()

            result = f"<b>{self.strings['who']}</b>\n\n"
            for symbol in symbols.split(","):
                price = data[symbol]
                if symbol == "BTC":
                    emoji = "<emoji document_id=5465465383035083768>ü™ô</emoji>"
                elif symbol == "TON":
                    emoji = "<emoji document_id=5197515039296200279>üíé</emoji>"
                elif symbol == "ETH":
                    emoji = "<emoji document_id=5458702441631456730>ü™©</emoji>"
                elif symbol == "USDT":
                    emoji = "<emoji document_id=5465546600866652008>üí∞</emoji>"    
                else:
                    emoji = ""
                result += f"{emoji} 1 {symbol}:\n\n"
                result += f"<emoji document_id=6323139226418284334>üá∑üá∫</emoji> {price['RUB']:.2f} RUB\n"
                result += f"<emoji document_id=6323374027985389586>üá∫üá∏</emoji> {price['USD']:.2f} USD\n"
                result += f"<emoji document_id=6323217102765295143>üá™üá∫</emoji> {price['EUR']:.2f} EUR\n"
                result += f"<emoji document_id=6323289850921354919>üá∫üá¶</emoji> {price['UAH']:.2f} UAH\n\n"

        except Exception as e:
            result = f"An error occurred while getting prices: {str(e)}"

        return result
    
    @loader.command(
        ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å BTC",
        ua_doc="–ü–æ–∫–∞–∑–∞—Ç–∏ –∫—É—Ä—Å BTC"
    )
    async def btccmd(self, message):
        """Show BTC stonks"""
        result = await self.stonks("BTC")
        await utils.answer(message, result)

    @loader.command(
        ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å TON",
        ua_doc="–ü–æ–∫–∞–∑–∞—Ç–∏ –∫—É—Ä—Å TON"
    )
    async def sttoncmd(self, message):
        """Show TON stonks"""
        result = await self.stonks("TON")
        await utils.answer(message, result)

    @loader.command(
        ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å ETH",
        ua_doc="–ü–æ–∫–∞–∑–∞—Ç–∏ –∫—É—Ä—Å ETH"
    )
    async def stethcmd(self, message):
        """Show ETH stonks"""
        result = await self.stonks("ETH")
        await utils.answer(message, result)

    @loader.command(
        ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å USDT",
        ua_doc="–ü–æ–∫–∞–∑–∞—Ç–∏ –∫—É—Ä—Å USDT"
    )
    async def stusdtcmd(self, message):
        """Show USDT stonks"""
        result = await self.stonks("USDT")
        await utils.answer(message, result)

    @loader.command(
        ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (–∫–æ—Ç–æ—Ä—ã–µ –≤ –º–æ–¥—É–ª–µ)",
        ua_doc="–ü–æ–∫–∞–∑–∞—Ç–∏ –∫—É—Ä—Å –≤—Å—ñ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (—è–∫—ñ –≤ –º–æ–¥—É–ª—ñ)"
    )
    async def stcryptocmd(self, message):
        """Show all stonks"""
        result = await self.stonks("BTC,TON,ETH,USDT")
        await utils.answer(message, result)
